#!/usr/bin/env python2
# -*- coding: utf-8 -*-

from urllib import urlopen
from bs4 import BeautifulSoup
import xml.etree.ElementTree as ET
from subprocess import call
import sys
import argparse


def get_links(vid_id):
    dic = {}
    link = "http://service.canal-plus.com/video/rest/getVideosLiees/cplus/"
    page = urlopen(link + vid_id)
    data = page.read()
    parser = ET.fromstring(data)
    for video in parser.findall('VIDEO'):
        if video.find('ID').text == vid_id:
            videos = video.find('MEDIA/VIDEOS')
            for v in videos:
                dic[v.tag] = v.text
                # print "%s%s%s" % (v.tag, (11-len(v.tag)) * " ", v.text)
            break
    return dic


def available_videos(url, display=True, date=None):
    # Get the data and create the parser
    page = urlopen(url)
    data = page.read()
    soup = BeautifulSoup(data)

    ul = soup.find('div', class_='listeRegroupee').find('ul')
    lis = ul.find_all('li', class_='_thumbs')
    for li in lis:
        vid_id = li.get('id').split('_')[-1]
        vid_title = li.find('h4').get('title')
        vid_date = li.find('p', class_='subtxt').find('a').getText().strip()
        if display:
            print "%s\t%s\t%s" % (vid_id, vid_date, vid_title)
        date_small = vid_date.split()[-1]
        if date and date == date_small:
            return vid_id
    return None

if __name__ == '__main__':
    channels = {
        "lpj": "http://www.canalplus.fr/c-divertissement/c-le-petit-journal/pid6515-le-petit-journal.html",
        "guignols": "http://www.canalplus.fr/c-divertissement/pid1784-c-les-guignols.html"
    }

    parser = argparse.ArgumentParser(
        description='Watch Canal+ videos without ads')
    parser.add_argument('-d', '--date', help='Release date (ex: 04/05)')
    parser.add_argument('-r', '--resolution', choices=['high', 'low'],
                        default='high', help='Resolution')
    parser.add_argument('chaine', choices=['lpj', 'guignols'], help='Canal to play')
    parser.add_argument('-p', '--player', help='Player to use',
                        default='mplayer')
    parser.add_argument('--download', action='store_true')
    args = parser.parse_args()

    url = channels[args.chaine]

    date = args.date
    if date:
        display = False
    else:
        display = True

    vid_id = available_videos(url, display=display, date=date)
    if vid_id is None:
        if date is None:
            vid_id = raw_input("Video ID: ")
        else:  # There was an error
            print "Video for date %s not found" % date
            sys.exit()
    hls_url = get_links(vid_id)['HLS']
    if args.resolution == 'high':
        hls_url = hls_url.replace('master', 'index_3_av')
    if args.download:
        call(["ffmpeg", "-i", hls_url, 'vid.ts'])
    else:
        call([args.player, hls_url])
